(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{142:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(2),i=n(9),r=(n(0),n(155)),s={id:"index",title:"Smith Charts with Chart.js",sidebar:"index"},o={id:"index",title:"Smith Charts with Chart.js",description:"Installation",source:"@site/docs/index.md",permalink:"/chartjs-chart-smith/index",editUrl:"https://github.com/chartjs/chartjs-chart-smith/edit/master/docs/docs/index.md",sidebar:"someSidebar",next:{title:"General",permalink:"/chartjs-chart-smith/examples"}},c=[{value:"Installation",id:"installation",children:[{value:"Data Representation",id:"data-representation",children:[]},{value:"Scale Configuration",id:"scale-configuration",children:[]},{value:"Dataset Configuration",id:"dataset-configuration",children:[]}]},{value:"License",id:"license",children:[]},{value:"Bugs &amp; issues",id:"bugs--issues",children:[]}],l={rightToc:c};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"> npm install chartjs-chart-smith\n")),Object(r.b)("p",null,"To create a Smith Chart, include ",Object(r.b)("inlineCode",{parentName:"p"},"chartjs-chart-smith.js")," after ",Object(r.b)("inlineCode",{parentName:"p"},"Chart.js")," and then create the chart by setting the ",Object(r.b)("inlineCode",{parentName:"p"},"type")," attribute to ",Object(r.b)("inlineCode",{parentName:"p"},"'smith'"),". "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"var mySmithChart = new Chart({\n    type: 'smith',\n    data: dataObject\n});\n")),Object(r.b)("h3",{id:"data-representation"},"Data Representation"),Object(r.b)("p",null,"The smith chart can graph multiple datasets at once. The data for each dataset is in the form of complex numbers."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"var smithChartData = {\n    datasets: [{\n        label: 'Dataset 1',\n        data: [{\n            real: 0,\n            imag: 1\n        }, {\n            real: 1,\n            imag: 1\n        }]\n    }]  \n};\n")),Object(r.b)("h3",{id:"scale-configuration"},"Scale Configuration"),Object(r.b)("p",null,"The smith chart scale can be configured by placing options into the config that is passed to the chart upon creation."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"new Chart({\n    config: {\n        scale: {\n            display: true, // setting false will hide the scale\n            gridLines: {\n                // setting false will hide the grid lines\n                display: true, \n\n                // the color of the grid lines\n                color: rgba(0, 0, 0, 0.1), \n\n                // thickness of grid lines\n                lineWidth: 1, \n            },\n            ticks: {\n                // The color of the scale label text\n                fontColor: 'black',\n\n                // The font family used to render labels\n                fontFamily: 'Helvetica',\n\n                // The font size in px\n                fontSize: 12,\n\n                // Style of font\n                fontStyle: 'normal'\n\n                // Function used to convert real valued ticks to strings\n                rCallback: function(tick, index, ticks) {}\n\n                // Function used to convert imaginary valued ticks to strings\n                xCallback: function(tick, index, ticks) {}\n            }\n        }\n    }\n});\n")),Object(r.b)("h3",{id:"dataset-configuration"},"Dataset Configuration"),Object(r.b)("p",null,"The datasets for smith charts support many of the same options as the line chart"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"{\n    // Bezier Curve tension. Set to 0 for straight lines\n    tension: 0,\n\n    // Fill color for dataset\n    backgroundColor: 'rgba(0, 0, 0, 0.1)',\n\n    // Width of line\n    borderWidth: 1,\n\n    // Line color\n    borderColor: 'rgba(0, 0, 0, 0.1)',\n\n    // Line ending style\n    borderCapStyle: 'butt',\n\n    // Line dash style\n    borderDash: [],\n\n    // Dash offset. Used in conjunction with borderDash property\n    borderDashOffset: 0,\n\n    // Line join style\n    borderJoinStyle: 'miter',\n\n    // Do we fill the line?\n    fill: true,\n\n    // Point radius\n    radius: 3,\n\n    // Point style (circle, cross, etc)\n    pointStyle: 'circle',\n\n    // Point fill color\n    pointBackgroundColor: 'rgba(0, 0, 0, 0.1)',\n\n    // Point stroke color\n    pointBorderColor: 'rgba(0, 0, 0, 0.1)',\n\n    // Point stroke width\n    pointBorderWidth: 1,\n\n    // Used for hit detection\n    hitRadius: 3\n}\n")),Object(r.b)("h2",{id:"license"},"License"),Object(r.b)("p",null,"chartjs-chart-smith is available under the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://opensource.org/licenses/MIT"}),"MIT license"),"."),Object(r.b)("h2",{id:"bugs--issues"},"Bugs & issues"),Object(r.b)("p",null,"When reporting bugs or issues, if you could include a link to a simple ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://jsbin.com"}),"jsbin")," or similar demonstrating the issue, that would be really helpful."))}d.isMDXComponent=!0}}]);